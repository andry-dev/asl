#pragma once

#include "asl/detect_features"
#include "asl/string_view"

#ifdef ASL_WIN32
    #define WIN32_LEAN_AND_MEAN
    #define NOMINMAX
    #include <windows.h>
#elif defined(ASL_POSIX)
    #include <sys/types.h>
    #include <sys/stat.h>
    #include <unistd.h>
#elif defined(ASL_UNKNOWN_PLATFORM)
    #error "[asl/filesystem] Your platform is unsupported :("
#endif

namespace asl
{
namespace fs
{

    namespace details
    {
        inline bool fileExists(const char* path)
        {
            #if defined(ASL_WIN32)
                WIN32_FIND_DATA FindFileData;
                HANDLE handle = FindFirstFile(path, &FindFileData);
                int found = handle != INVALID_HANDLE_VALUE;
                if (found) 
                {
                    FindClose(handle);
                }
                return found;
            #elif defined(ASL_POSIX)

                struct stat status;
                if(::stat(path, &status) == 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }

            #endif // defined(ASL_WIN32)
        }
    }


    inline bool fileExists(asl::string_view file)
    {
        return details::fileExists(file.data());
    }

} // namespace fs
} // namespace asl

// vim: ft=cpp
