#pragma once

#include <type_traits>

namespace asl
{
    template <bool B> using bool_constant = std::integral_constant<bool, B>;

    template <class...> using void_t = void;
    template <class T> struct identity { using type = T; };

    template <class T, class Void, template <class...> class, class...>
    struct detector : identity<T> { using value_t = std::false_type; };

    template <class T, template <class...> class U, class... Args>
    struct detector<T, void_t<U<Args...>>, U, Args...> :
        identity<U<Args...>>
    { using value_t = std::true_type; };

    struct nonesuch final
    {
        nonesuch (nonesuch const&) = delete;
        nonesuch () = delete;
        ~nonesuch () = delete;

        void operator=(nonesuch const&) = delete;
    };


    template <class T, template <class...> class U, class... Args>
    using detected_or = detector<T, void, U, Args...>;

    template <template <class...> class T, class... Args>
    using detected_t = typename detected_or<nonesuch, T, Args...>::type;

    template <class T, template <class...> class U, class... Args>
    using detected_or_t = typename detected_or<T, U, Args...>::type;

    template <class To, template <class...> class T, class... Args>
    using is_detected_convertible = std::is_convertible<
        detected_t<T, Args...>,
        To
    >;

    template <class T, template <class...> class U, class... Args>
    using is_detected_exact = std::is_same<T, detected_t<U, Args...>>;

    template <template <class...> class T, class... Args>
    using is_detected = typename detected_or<nonesuch, T, Args...>::value_t;

    template <class...> struct conjunction;
    template <class...> struct disjunction;
    template <class B> using negation = bool_constant<!B::value>;

    template <class T, class... Ts>
    struct conjunction<T, Ts...> :
    bool_constant<T::value && conjunction<Ts...>::value>
    { };
    template <> struct conjunction<> : std::true_type { };

    template <class T, class... Ts>
    struct disjunction<T, Ts...> :
    bool_constant<T::value || disjunction<Ts...>::value>
    { };

    template <> struct disjunction<> : std::false_type { };

    template <bool... Bs>
    constexpr bool require = conjunction<bool_constant<Bs>...>::value;

    template <bool... Bs>
    constexpr bool either = disjunction<bool_constant<Bs>...>::value;

    template <bool... Bs>
    constexpr bool disallow = not require<Bs...>;

    template <template <class...> class Op, class... Args>
    constexpr bool exists = is_detected<Op, Args...>::value;

    template <class To, template <class...> class Op, class... Args>
    constexpr bool converts_to = is_detected_convertible<To, Op, Args...>::value;

    template <class Exact, template <class...> class Op, class... Args>
    constexpr bool identical_to = is_detected_exact<Exact, Op, Args...>::value;

    template <typename T, typename U>
    constexpr bool is_same_v = std::is_same<T, U>::value;

    template <typename T1, typename T2>
    using enable_fwd_t = std::enable_if_t<is_same_v<std::decay_t<T1>, std::decay_t<T2>>>;


    template <typename T>
    struct disable_type : std::false_type
    {  };

    template <typename T>
    constexpr bool disable_type_v = disable_type<T>::value;
} // namespace asl

// vim: ft=cpp ts=4 sw=4 sts=4
