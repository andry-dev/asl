#pragma once

#include <cstdint>
#include <cstddef>
#include <utility>

#include "gsl/assert"

namespace asl
{
    using num = const int;
    using mut_num = int;

    using u8 = const std::uint8_t;
    using mut_u8 = std::uint8_t;

    using i8 = const std::int8_t;
    using mut_i8 = std::int8_t;

    using u16 = const std::uint16_t;
    using mut_u16 = std::uint16_t;

    using i16 = const std::int16_t;
    using mut_i16 = std::int16_t;

    using u32 = const std::uint32_t;
    using mut_u32 = std::uint32_t;

    using i32 = const std::int32_t;
    using mut_i32 = std::int32_t;

    using u64 = const std::uint64_t;
    using mut_u64 = std::uint64_t;

    using i64 = const std::int64_t;
    using mut_i64 = std::int64_t;

    using f32 = const float;
    using mut_f32 = float;

    using f64 = const double;
    using mut_f64 = double;

    using sizei = const std::size_t;
    using mut_sizei = std::size_t;

    template <typename T, typename Constraint, typename Phantom>
    class constrained_type
    {
    public:
        explicit constexpr constrained_type(T val) noexcept
            : m_val(val)
        {
            Constraint::check(val);
        }

        constexpr constrained_type(const constrained_type& oth) noexcept
            : m_val(oth.m_val)
        {
            Constraint::check(oth.m_val);
        }

        constexpr constrained_type& operator=(constrained_type oth) noexcept
        {
            Constraint::check(oth.m_val);
            std::swap(m_val, oth.m_val);
            return *this;
        }

        constexpr constrained_type(constrained_type&& oth) noexcept
        {
            m_val = oth.m_val;
            Constraint::check(m_val);
        }

        constexpr constrained_type& operator=(constrained_type&& oth) noexcept
        {
            if (this != &oth)
            {
                m_val = oth.m_val;
                Constraint::check(m_val);
            }

            return *this;
        }

        constexpr T get() const noexcept
        {
            return m_val;
        }

        constexpr void set(T val) noexcept
        {
            Constraint::check(val);
           m_val = val; 
        }
    private:
        T m_val;
    };

    template <typename T, T min>
    struct lower_limit
    {
        static void check(T val)
        {
            Expects(val >= min,
                    "[asl/lower_limit] This variable reached the lower limit");
        }
    };

    template <typename T, T max>
    struct upper_limit
    {
        static void check(T val)
        {
            Expects(val <= max,
                    "[asl/upper_limit] This variable reached the upper limit");
        }
    };
    
    template <typename T, T min, T max>
    struct range_constraint
    {
        static void check(T val)
        {
            Expects(val >= min,
                    "[asl/range_constraint] This variable reached the lower limit");

            Expects(val <= max,
                    "[asl/range_constraint] This variable reached the upper limit");
        }
    };

    template <typename T, typename Phantom>
    class strong_typedef
    {
    public:

        explicit constexpr strong_typedef(T val) noexcept
            : m_val(val)
        {
        }

        constexpr strong_typedef(const strong_typedef& oth) noexcept
        {
            m_val = oth.m_val;
        }

        constexpr strong_typedef& operator=(strong_typedef oth) noexcept
        {
            std::swap(m_val, oth.m_val);
            return *this;
        }

        constexpr strong_typedef(strong_typedef&& oth) noexcept
        {
            m_val = oth.m_val;
        }

        constexpr strong_typedef& operator=(strong_typedef&& oth) noexcept
        {
            if (this != &oth)
            {
                m_val = oth.m_val;
            }

            return *this;
        }

        constexpr T get() const noexcept
        {
            return m_val;
        }

        constexpr void set(T val) noexcept
        {
            m_val = val;
        }
    private:
        T m_val;
    };

} // namespace asl

// vim: ft=cpp
