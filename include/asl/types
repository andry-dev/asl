#pragma once

#include <cstdint>
#include <cstddef>
#include <utility>

#include "gsl/assert"

namespace asl
{
    using num = int;

    using u8 = std::uint8_t;
    using i8 = std::int8_t;

    using u16 = std::uint16_t;
    using i16 = std::int16_t;

    using u32 = std::uint32_t;
    using i32 = std::int32_t;

    using u64 = std::uint64_t;
    using i64 = std::int64_t;

    using f32 = float;
    using f64 = double;

    using isize = asl::i64;
    using usize = asl::u64;

    template <typename T, typename Constraint, typename Phantom>
    class constrained_type
    {
    public:
        explicit constexpr constrained_type(T val) noexcept
            : m_val(val)
        {
            Constraint::check(val);
        }

        ~constrained_type() = default;

        constexpr constrained_type(const constrained_type& oth) noexcept
            : m_val(oth.m_val)
        {
            Constraint::check(oth.m_val);
        }

        constexpr constrained_type& operator=(constrained_type oth) noexcept
        {
            Constraint::check(oth.m_val);
            std::swap(m_val, oth.m_val);
            return *this;
        }

        constexpr constrained_type(constrained_type&& oth) noexcept
        {
            m_val = oth.m_val;
            Constraint::check(m_val);
        }

        constexpr constrained_type& operator=(constrained_type&& oth) noexcept
        {
            if (this != &oth)
            {
                m_val = oth.m_val;
                Constraint::check(m_val);
            }

            return *this;
        }

        constexpr T& value() noexcept
        {
            Constraint::check(m_val);
            return m_val;
        }
    private:
        T m_val;
    };

    template <typename T, T min>
    struct lower_limit
    {
        static void check(T val)
        {
            Expects(val >= min,
                    "[asl/lower_limit] This variable reached the lower limit");
        }
    };

    template <typename T, T max>
    struct upper_limit
    {
        static void check(T val)
        {
            Expects(val <= max,
                    "[asl/upper_limit] This variable reached the upper limit");
        }
    };
    
    template <typename T, T min, T max>
    struct range_constraint
    {
        static void check(T val)
        {
            Expects(val >= min,
                    "[asl/range_constraint] This variable reached the lower limit");

            Expects(val <= max,
                    "[asl/range_constraint] This variable reached the upper limit");
        }
    };

    template <typename T, typename Phantom>
    struct strong_typedef
    {
        T value;
    };

    template <typename Container>
    auto ssize(const Container& container)
    {
        if constexpr(std::is_signed_v<decltype(container.size())>)
        {
            return container.size();
        }

        using signed_type = std::make_signed_t<decltype(container.size())>;
        return static_cast<signed_type>(container.size());
    }

    template <typename Container, typename Index>
    auto saccess(Container& container, Index idx) -> decltype(container[idx])
    {
        if constexpr (std::is_unsigned_v<Index>)
        {
            return container[idx];
        }

        using unsigned_type = std::make_unsigned_t<Index>;

        return container[static_cast<unsigned_type>(idx)];
    }

    template <typename Container, typename Index>
    auto saccess(const Container& container, Index idx) -> decltype(container[idx])
    {
        if constexpr (std::is_unsigned_v<Index>)
        {
            return container[idx];
        }

        using unsigned_type = std::make_unsigned_t<Index>;

        return container[static_cast<unsigned_type>(idx)];
    }
} // namespace asl

// vim: ft=cpp
