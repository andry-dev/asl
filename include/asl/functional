#pragma once

#include <algorithm>
#include <tuple>

#include "asl/types"
#include "gsl/string_span"
#include "asl/string_view"

namespace asl
{
    template <typename CharT>
    class basic_string_view;


    template <typename Container, typename Func>
    inline constexpr void transform(Container& c, Func&& f)
    {
        std::transform(std::begin(c), std::end(c), std::begin(c), std::forward<Func>(f));
    }

    template <typename Container, typename Func>
    inline constexpr Container sort(Container& c, Func&& f)
    {
        std::sort(std::begin(c), std::end(c), std::begin(c), std::forward<Func>(f));
    }

    template <typename Container, typename Func>
    inline constexpr void copy(Container& src, Container& dest)
    {
        std::copy(std::begin(src), std::end(src), std::begin(dest));
        return dest;
    }

    template <typename Container, typename Func>
    inline constexpr void copy_if(Container& src, Container& dest, Func&& f)
    {
        std::copy_if(std::begin(src), std::begin(src), std::begin(dest), std::forward<Func>(f));
    }

    template <const asl::sizei Index = 0, typename Func, typename... Ts>
    inline constexpr std::enable_if_t<Index == sizeof...(Ts), void>
    for_each_tuple(std::tuple<Ts...>, Func) noexcept
    { }

    template <const asl::sizei Index = 0, typename Func, typename... Ts>
    inline constexpr std::enable_if_t<Index < sizeof...(Ts), void>
    for_each_tuple(std::tuple<Ts...> t, Func f) noexcept
    {
        f(std::get<Index>(t));
        for_each_tuple<Index + 1, Func, Ts...>(t, f);
    }

    // this hack
    template <typename... Args, typename F>
    void for_each_arg(F f, Args&&... args) noexcept
    {
        [](...){}((f(std::forward<Args>(args)), 0)...);
    }

    template <typename CharT>
    inline std::basic_string<CharT> to_string(asl::basic_string_view<CharT> str)
    {
        return { str.data(), str.size() };
    }

    template <typename CharT>
    inline std::basic_string<CharT> to_string(gsl::basic_string_span<CharT> str)
    {
        return { str.begin(), str.size() };
    }

    template <typename CharT>
    constexpr asl::num strlen(const CharT* str) noexcept
    {
        asl::num count = 0;
        for (asl::num i = 0; str[i] != '\0'; ++i)
        {
            ++count;
        }

        return count;
    }



} // namespace asl

// vim: ft=cpp
