#pragma once

#include "asl/types"
#include "asl/meta"
#include "asl/expected"

#include <array>

#include <cstdio>

namespace asl
{
    template <typename T>
    class ring_view
    {
    public:
        using const_iterator = const T*;
        using iterator = const_iterator;

        constexpr ring_view(T* begin, T* end)
            : m_begin(begin), m_end(end)
        {

        }

        constexpr const T& operator[](const asl::isize i) const
        {
            return *(m_begin + (i % size()));
        }

        constexpr asl::isize size() const
        {
            return m_end - m_begin;
        }

        constexpr iterator begin() const
        {
            return m_begin;
        }

        constexpr const_iterator cbegin() const
        {
            return m_begin;
        }

        constexpr iterator end() const
        {
            return m_end;
        }

        constexpr iterator cend() const
        {
            return m_end;
        }

    private:
        T* m_begin;
        T* m_end;
    };

    template <typename T, const asl::isize N>
    class static_ring
    {
    public:
        using const_iterator = const T*;
        using iterator = T*;

        constexpr static_ring()
            : m_head(0), m_tail(0)
        {
            for (auto& x : m_data)
            {
                new (&x) T{};
            }
        }

        constexpr const T& operator[](const asl::isize i) const
        {
            return (m_data[m_tail + i]);
        }

        constexpr asl::i32 size() const
        {
            return m_head - m_tail;
        }

        constexpr asl::i32 capacity() const
        {
            return N;
        }

        constexpr iterator begin()
        {
            return &m_data[m_tail];
        }

        constexpr const_iterator cbegin() const
        {
            return &m_data[m_tail];
        }

        constexpr iterator end()
        {
            return (&m_data[m_head]);
        }

        constexpr const_iterator cend() const
        {
            return (&m_data[m_head]);
        }

        constexpr bool full()
        {
            return m_head == (m_tail - 1);
        }

        constexpr bool empty()
        {
            return m_head == m_tail;
        }

        template <typename Elem, typename = asl::enable_fwd_t<T, Elem>>
        constexpr void push(Elem&& e)
        {
            if (full())
            {
                m_tail = (m_tail + 1) % N;
            }

            m_data[m_head] = std::forward<Elem>(e);

            m_head = (m_head + 1) % N;
        }

        constexpr T& read()
        {
            if (empty())
            {
                return m_data[m_tail];
            }

            auto& ret = m_data[m_tail];
            m_tail = (m_tail + 1) % N;
            return ret;
        }

        constexpr T& back()
        {
            return m_data[m_tail];
        }

        constexpr T& front()
        {
            return m_data[(m_head - 1) % N];
        }

        constexpr void reset()
        {
            m_head = 0;
            m_tail = 0;
        }

    private:
        T m_data[N];
        asl::i32 m_head;
        asl::i32 m_tail;
    };
}

// vim: ft=cpp
