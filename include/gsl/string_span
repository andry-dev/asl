#pragma once

#include <string>

#include "asl/types"

namespace gsl
{
    template <typename CharT>
    class basic_string_span
    {
    public:
        template <std::size_t N>
        constexpr basic_string_span(const CharT (&literal)[N])
            : m_begin(literal), m_end(literal + N)
        { }

        constexpr basic_string_span(const CharT* ptr, const asl::sizei size)
            : m_begin(ptr), m_end(ptr + size)
        { }

        basic_string_span(const std::basic_string<CharT>& str)
            : m_begin(str.c_str()), m_end(str.c_str() + str.size())
        { }

        constexpr CharT& operator[](const asl::sizei i)
        {
            return *(m_begin + i);
        }

        constexpr const asl::sizei size() const
        {
            return (m_end - m_begin);
        }

        constexpr CharT* data()
        {
            return m_begin;
        }

        constexpr const CharT* c_str() const
        {
            return m_begin;
        }

        constexpr bool empty() const
        {
            return m_begin == m_end;
        }

        constexpr CharT& front()
        {
            return *m_begin;
        }

        constexpr CharT& back()
        {
            return *(m_end - 1);
        }

        constexpr CharT* begin()
        {
            return m_begin;
        }

        constexpr CharT* end()
        {
            return m_end;
        }

        constexpr const CharT* cbegin() const
        {
            return m_begin;
        }

        constexpr const CharT* cend() const
        {
            return m_end;
        }

        constexpr gsl::basic_string_span<CharT> substr(const asl::sizei pos, const asl::sizei count)
        {
            Expects(count < size(), "The count is less than the size of the string");
            return gsl::basic_string_span<CharT>{m_begin + pos, count};
        }

        operator std::basic_string<CharT>() const
        {
            return std::basic_string<CharT>{ m_begin, size() };
        }

        std::basic_string<CharT> operator+(const CharT* rhs)
        {
            return std::basic_string<CharT>{c_str()} + std::basic_string<CharT>{rhs};
        }

        friend std::basic_string<CharT> operator+(const CharT* lhs, gsl::basic_string_span<CharT> rhs)
        {
            return std::basic_string<CharT>{lhs} + std::basic_string<CharT>{rhs.c_str()};
        }
    private:

        const CharT* m_begin;
        const CharT* m_end;
    };

    using string_span = basic_string_span<char>;
    using u16string_span = basic_string_span<char16_t>;
    using u32string_span = basic_string_span<char32_t>;
    using wstring_span = basic_string_span<wchar_t>;

    namespace literals
    {
        inline constexpr string_span
        operator""_ss(const char* str, const asl::sizei size) noexcept
        {
            return { str, size };
        }

        inline constexpr u16string_span
        operator""_ss(const char16_t* str, const asl::sizei size) noexcept
        {
            return { str, size };
        }

        inline constexpr u32string_span
        operator""_ss(const char32_t* str, const asl::sizei size) noexcept
        {
            return { str, size };
        }

        inline constexpr wstring_span
        operator""_ss(const wchar_t* str, const asl::sizei size) noexcept
        {
            return { str, size };
        }
    }

} // namespace gsl

// vim: ft=cpp
