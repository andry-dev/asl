#pragma once

#include "asl/types"
#include "gsl/assert"

#include <utility>

#include <array>
#include <vector>

namespace gsl
{
    template <typename Func>
    class [[nodiscard]] final_action
    {
    public:
        explicit final_action(Func f)
            : m_func(std::move(f))
            , m_should_invoke(true)
        { }

        final_action(final_action&& oth)
            : m_func(std::move(oth.m_func))
            , m_should_invoke(oth.m_should_invoke)
        {
            oth.m_should_invoke = false;
        }

        final_action(const final_action&) = delete;
        final_action& operator=(const final_action&) = delete;
        final_action& operator=(final_action&&) = delete;

        ~final_action() noexcept
        {
            if (m_should_invoke)
            {
                m_func();
            }
        }

    private:
        Func m_func;
        bool m_should_invoke;
    };

    template <typename Func>
    inline final_action<Func> finally(const Func& f)
    {
        return { f };
    }

    template <typename Func>
    inline final_action<Func> finally(Func&& f)
    {
        return { std::forward<Func>(f) };
    }

    template <typename T, asl::sizei N>
    constexpr T& at(T (&arr)[N], asl::sizei index)
    {
        Expects(index < N);
        return arr[index];
    }
    
    template <typename T, asl::sizei N>
    constexpr T& at(std::array<T, N>& arr, asl::sizei index)
    {
        Expects(index < N);
        return arr[index];
    }

    template <typename Container>
    constexpr typename Container::value_type& at(Container& c, asl::sizei index)
    {
        Expects(index < c.size());
        return c[index];
    }

    template <typename T>
    constexpr const T& at(std::initializer_list<T> l, asl::sizei index)
    {
        Expects(index < l.size());
        return *(l.begin() + index);
    }

} // namespace gsl

// vim: ft=cpp
