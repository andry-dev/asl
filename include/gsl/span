#pragma once

#include "gsl/assert"
#include "asl/types"
#include <type_traits>
#include <utility>
#include "asl/meta"

namespace gsl
{
    struct null_span { };


    template <typename T>
    class span
    {
    public:
        using value_type = T;

        constexpr span(null_span)
            : m_ptr(nullptr)
            , m_size(0)
        {
        }

        constexpr span()
            : m_ptr(nullptr)
            , m_size(0)
        { }

        template <typename Container, std::enable_if_t<!std::is_same_v<Container, span>>>
        constexpr span(Container& container) noexcept
            : m_ptr(container.data())
            , m_size(container.size())
        {
        }

        template <typename Container, std::enable_if_t<!std::is_same_v<Container, span>>>
        constexpr span(const Container& container) noexcept
            : m_ptr(container.data())
            , m_size(container.size())
        {
        }

        constexpr span(T* begin, T* end) noexcept
            : m_ptr(begin)
            , m_size(end - begin)
        {
        }

        constexpr span(T* ptr, asl::isize size) noexcept
            : m_ptr(ptr)
            , m_size(size)
        {
        }

        template <asl::isize N>
        constexpr span(T (&arr)[N]) noexcept
            : m_ptr(arr)
            , m_size(N)
        {
        }

        constexpr span(const span& oth) noexcept
            : m_ptr(oth.m_ptr)
            , m_size(oth.m_size)
        { }

        constexpr span& operator=(const span& oth) noexcept
        {
            m_ptr = oth.m_ptr;
            m_size = oth.m_size;

            return *this;
        }

        constexpr span(span&& oth) noexcept
            : m_ptr(std::exchange(oth.m_ptr, nullptr))
            , m_size(std::exchange(oth.m_size, 0))
        {
        }

        constexpr span& operator=(span&& oth) noexcept
        {
            m_ptr = std::exchange(oth.m_ptr, nullptr);
            m_size = std::exchange(oth.m_size, 0);

            return *this;
        }

        constexpr asl::isize size() const noexcept
        {
            return m_size;
        }

        constexpr bool empty() const noexcept
        {
            return m_size == 0;
        }

        constexpr T* get() noexcept
        {
            return m_ptr;
        }

        constexpr const T* get() const noexcept
        {
            return m_ptr;
        }

        constexpr T* begin() noexcept
        {
            return m_ptr;
        }

        constexpr T* end() noexcept
        {
            return m_ptr + m_size;
        }

        constexpr const T* begin() const noexcept
        {
            return m_ptr;
        }

        constexpr const T* end() const noexcept
        {
            return m_ptr + m_size;
        }

        constexpr T& at(asl::isize index) noexcept
        {
            Expects(index < m_size, "[gsl/span] Index out of bounds");
            return *(m_ptr + index);
        }

        constexpr const T& at(asl::isize index) const noexcept
        {
            Expects(index < m_size, "[gsl/span] Index out of bounds");
            return *(m_ptr + index);
        }

        constexpr T& operator[](asl::isize index) noexcept
        {
            Expects(index < m_size, "[gsl/span] Index out of bounds");
            return *(m_ptr + index);
        }

        constexpr const T& operator[](asl::isize index) const noexcept
        {
            Expects(index < m_size, "[gsl/span] Index out of bounds");
            return *(m_ptr + index);
        }

        constexpr T* data() const noexcept
        {
            return m_ptr;
        }

        constexpr span subspan(asl::isize start, asl::isize end = asl::isize(-1)) const noexcept
        {
            if (end == asl::isize(-1))
            {
                end = m_size;
            }

            Ensures((start >= 0) && (start < m_size) && (end <= m_size), "[gsl/span] Invalid subspan range!");
            return span{ m_ptr + start, end - start };
        }

    private:

        T* m_ptr;
        asl::isize m_size;
    };

    template <typename Container>
    auto make_span(const Container& t)
    {
        return gsl::span<typename Container::value_type>{t};
    }

    template <typename Container>
    auto make_const_span(const Container& t)
    {
        return gsl::span<const typename Container::value_type>{t};
    }

} // namespace gsl

// vim: ft=cpp
